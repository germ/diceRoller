!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC      = clang$/;"	m
CHA	dice.h	19;"	d
CON	dice.h	16;"	d
Cha	dice.h	/^      Cha;$/;"	m	struct:charScores	access:public
CharScores	dice.h	/^} CharScores;$/;"	t	typeref:struct:charScores
Con	dice.h	/^      Con,$/;"	m	struct:charScores	access:public
DEX	dice.h	15;"	d
Dex	dice.h	/^      Dex,$/;"	m	struct:charScores	access:public
DiceItem	dice.h	/^} DiceItem;$/;"	t	typeref:struct:diceData
DiceObj	dice.h	/^} DiceObj;$/;"	t	typeref:struct:diceRoll
EXEC	Makefile	/^EXEC		= diceRoll$/;"	m
FLAGS	Makefile	/^FLAGS		= -g $/;"	m
FLAGS	Makefile	/^FLAGS 	= -Wall$/;"	m
HistoryData	main.h	/^} HistoryData;$/;"	t	typeref:struct:historyData
INT	dice.h	17;"	d
Int	dice.h	/^      Int,$/;"	m	struct:charScores	access:public
LIBS	Makefile	/^LIBS 		= -lcurses$/;"	m
MAX_ENTRIES	dice.h	12;"	d
MAX_HISTORY	main.h	7;"	d
MAX_STRING_LEN	dice.h	10;"	d
STR	dice.h	14;"	d
Str	dice.h	/^  int Str,$/;"	m	struct:charScores	access:public
USELESS_CHAR	dice.h	11;"	d
WIS	dice.h	18;"	d
Window	main.h	/^} Window;$/;"	t	typeref:struct:windowData
Wis	dice.h	/^      Wis,$/;"	m	struct:charScores	access:public
atk	main.h	/^  DiceObj  atk;$/;"	m	struct:historyData	access:public
charScores	dice.h	/^typedef struct charScores {$/;"	s
charScores::Cha	dice.h	/^      Cha;$/;"	m	struct:charScores	access:public
charScores::Con	dice.h	/^      Con,$/;"	m	struct:charScores	access:public
charScores::Dex	dice.h	/^      Dex,$/;"	m	struct:charScores	access:public
charScores::Int	dice.h	/^      Int,$/;"	m	struct:charScores	access:public
charScores::Str	dice.h	/^  int Str,$/;"	m	struct:charScores	access:public
charScores::Wis	dice.h	/^      Wis,$/;"	m	struct:charScores	access:public
clean_hack	main.c	/^int clean_hack(WINDOW *win, int size, int start, int end) {$/;"	f	signature:(WINDOW *win, int size, int start, int end)
clean_hack	main.h	/^int clean_hack(WINDOW *win, int size, int start, int end);$/;"	p	signature:(WINDOW *win, int size, int start, int end)
clear_movements	main.c	/^int clear_movements(char* command,int *diceOffset,int *historyOffset) {$/;"	f	signature:(char* command,int *diceOffset,int *historyOffset)
clear_movements	main.h	/^int clear_movements(char *command_string, int *diceOffset,int *historyOffset);$/;"	p	signature:(char *command_string, int *diceOffset,int *historyOffset)
create_window	main.c	/^Window* create_window(int width, int height, int x, int y, char* title) {$/;"	f	signature:(int width, int height, int x, int y, char* title)
create_window	main.h	/^Window* create_window(int width, int height, int x, int y, char* title);$/;"	p	signature:(int width, int height, int x, int y, char* title)
curses_init	main.c	/^void curses_init() {$/;"	f
curses_init	main.h	/^void curses_init();$/;"	p	signature:()
diceData	dice.h	/^typedef struct diceData {$/;"	s
diceData::diceString	dice.h	/^  char* diceString;$/;"	m	struct:diceData	access:public
diceData::flavor	dice.h	/^  char* flavor;$/;"	m	struct:diceData	access:public
diceData::title	dice.h	/^  char* title;$/;"	m	struct:diceData	access:public
diceRoll	dice.h	/^typedef struct diceRoll {$/;"	s
diceRoll::diceString	dice.h	/^  char*       diceString;      \/\/\/< The original string$/;"	m	struct:diceRoll	access:public
diceRoll::result	dice.h	/^  int         result;          \/\/\/< Roll result$/;"	m	struct:diceRoll	access:public
diceRoll::resultString	dice.h	/^  char*       resultString;    \/\/\/< The formatted output (for printing)$/;"	m	struct:diceRoll	access:public
diceRoll::stats	dice.h	/^  CharScores* stats;           \/\/\/< Character scores, can be a NULL pointer$/;"	m	struct:diceRoll	access:public
diceString	dice.h	/^  char*       diceString;      \/\/\/< The original string$/;"	m	struct:diceRoll	access:public
diceString	dice.h	/^  char* diceString;$/;"	m	struct:diceData	access:public
draw_title	main.c	/^int draw_title(Window *win) { $/;"	f	signature:(Window *win)
draw_title	main.h	/^int draw_title(Window *win);$/;"	p	signature:(Window *win)
flavor	dice.h	/^  char* flavor;$/;"	m	struct:diceData	access:public
freeDiceObj	dice.c	/^void     freeDiceObj(DiceObj* obj) {$/;"	f	signature:(DiceObj* obj)
freeDiceObj	dice.h	/^void     freeDiceObj(DiceObj* obj);$/;"	p	signature:(DiceObj* obj)
freeDiceString	dice.c	/^void     freeDiceString(char** diceString) {$/;"	f	signature:(char** diceString)
freeDiceString	dice.h	/^void     freeDiceString(char** diceString);$/;"	p	signature:(char** diceString)
getSeperatedLength	dice.c	/^int      getSeperatedLength(char** diceArray) {$/;"	f	signature:(char** diceArray)
getSeperatedLength	dice.h	/^int      getSeperatedLength(char** diceArray);$/;"	p	signature:(char** diceArray)
height	main.h	/^          height,$/;"	m	struct:windowData	access:public
historyData	main.h	/^typedef struct historyData {$/;"	s
historyData::atk	main.h	/^  DiceObj  atk;$/;"	m	struct:historyData	access:public
historyData::title	main.h	/^  char    *title;$/;"	m	struct:historyData	access:public
loadDice	main.c	/^DiceItem** loadDice(int nArgs, char** args) {$/;"	f	signature:(int nArgs, char** args)
loadDice	main.h	/^DiceItem** loadDice(int nArgs, char** args);$/;"	p	signature:(int nArgs, char** args)
loadDiceFromFile	dice.c	/^DiceItem** loadDiceFromFile(char* path) {$/;"	f	signature:(char* path)
loadDiceFromFile	dice.h	/^DiceItem** loadDiceFromFile(char* path);$/;"	p	signature:(char* path)
main	main.c	/^int main() {$/;"	f
newDiceObj	dice.c	/^DiceObj* newDiceObj(char* diceString, int* scores) {$/;"	f	signature:(char* diceString, int* scores)
newDiceObj	dice.h	/^DiceObj* newDiceObj(char* diceString, int* scores);$/;"	p	signature:(char* diceString, int* scores)
parse_input	main.c	/^int parse_input(char* cmd, HistoryData** history_list, DiceItem** dice_list) {$/;"	f	signature:(char* cmd, HistoryData** history_list, DiceItem** dice_list)
parse_input	main.h	/^int parse_input(char* cmd, HistoryData** history_list, DiceItem** dice_list);$/;"	p	signature:(char* cmd, HistoryData** history_list, DiceItem** dice_list)
result	dice.h	/^  int         result;          \/\/\/< Roll result$/;"	m	struct:diceRoll	access:public
resultString	dice.h	/^  char*       resultString;    \/\/\/< The formatted output (for printing)$/;"	m	struct:diceRoll	access:public
rollDiceObj	dice.c	/^void     rollDiceObj(DiceObj* obj) {$/;"	f	signature:(DiceObj* obj)
rollDiceObj	dice.h	/^void     rollDiceObj(DiceObj* obj);$/;"	p	signature:(DiceObj* obj)
rollDiceString	dice.c	/^char*    rollDiceString(char *str) {$/;"	f	signature:(char *str)
rollDiceString	dice.h	/^char*    rollDiceString(char *str);$/;"	p	signature:(char *str)
seperateDiceString	dice.c	/^char**   seperateDiceString(char *orgString, char* delin) {$/;"	f	signature:(char *orgString, char* delin)
seperateDiceString	dice.h	/^char**   seperateDiceString(char *string, char* delin);$/;"	p	signature:(char *string, char* delin)
stats	dice.h	/^  CharScores* stats;           \/\/\/< Character scores, can be a NULL pointer$/;"	m	struct:diceRoll	access:public
title	dice.h	/^  char* title;$/;"	m	struct:diceData	access:public
title	main.h	/^  char    *title;$/;"	m	struct:historyData	access:public
title	main.h	/^  char*   title;$/;"	m	struct:windowData	access:public
width	main.h	/^  int     width,$/;"	m	struct:windowData	access:public
win	main.h	/^  WINDOW *win;$/;"	m	struct:windowData	access:public
windowData	main.h	/^typedef struct windowData {$/;"	s
windowData::height	main.h	/^          height,$/;"	m	struct:windowData	access:public
windowData::title	main.h	/^  char*   title;$/;"	m	struct:windowData	access:public
windowData::width	main.h	/^  int     width,$/;"	m	struct:windowData	access:public
windowData::win	main.h	/^  WINDOW *win;$/;"	m	struct:windowData	access:public
windowData::x	main.h	/^          x,$/;"	m	struct:windowData	access:public
windowData::y	main.h	/^          y;$/;"	m	struct:windowData	access:public
x	main.h	/^          x,$/;"	m	struct:windowData	access:public
y	main.h	/^          y;$/;"	m	struct:windowData	access:public
